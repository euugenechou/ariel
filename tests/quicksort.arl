void swap(int A[], int i, int j) {
    int temp = A[i];
    A[i] = A[j];
    A[j] = temp;
}

int partition(int A[], int lo, int hi) {
    int i = lo - 1;
    int j = hi + 1;
    int pivot = A[lo + ((hi - lo) / 2)];

    while (i < j) {
        i += 1;
        while (A[i] < pivot) {
            i += 1;
        }

        j -= 1;
        while (pivot < A[j]) {
            j -= 1;
        }

        if (i < j) {
            swap(A, i, j);
        }
    }

    return j;
}

void stack_push(int s[], int top[], int x) {
    s[top[0]] = x;
    top[0] += 1;
}

int stack_pop(int s[], int top[]) {
    top[0] -= 1;
    return s[top[0]];
}

void quicksort(int A[], int n) {
    int s[n];
    int top[1];

    int left = 0;
    int right = n - 1;
    stack_push(s, top, left);
    stack_push(s, top, right);

    int lo = 0;
    int hi = 0;
    while (top[0] != 0) {
        hi = stack_pop(s, top);
        lo = stack_pop(s, top);
        int p = partition(A, lo, hi);
        if (p + 1 < hi) {
            stack_push(s, top, p + 1);
            stack_push(s, top, hi);
        }
        if (lo < p) {
            stack_push(s, top, lo);
            stack_push(s, top, p);
        }
    }
}

void print_array(int A[], int n) {
    for (int i = 0; i < n; i += 1) {
        if (i > 0 && (i % 6 == 0)) {
            println();
        }
        print(A[i]);
        if ((i + 1) % 6 != 0 && (i + 1) != n) {
            print(", ");
        }
    }
    println();
}

int arr[100];
for (int i = 0; i < 100; i += 1) {
    arr[i] = rand() & ((1 << 12) - 1);
}

quicksort(arr, 100);
print_array(arr, 100);
