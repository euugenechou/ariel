// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"ariel/ast"
	"ariel/color"
	"ariel/misc"
	"fmt"
	"io"
	"os"
	"strconv"
	"strings"
	"text/scanner"
)

type Token struct {
	Literal string
	Int     int64
	Float   float64
	Bool    bool
}

//line parser.y:24
type yySymType struct {
	yys       int
	token     Token
	Program   ast.Program
	DeclList  []ast.Statement
	Decl      ast.Statement
	Type      ast.Type
	FuncDecl  ast.FuncDecl
	VarDecl   ast.VarDecl
	ParamList []ast.Param
	Param     ast.Param
	Block     ast.Block
	StmtList  []ast.Statement
	Stmt      ast.Statement
	While     ast.While
	For       ast.For
	IfElse    ast.IfElse
	Return    ast.Return
	ExprStmt  ast.ExprStmt
	Expr      ast.Expression
	Call      ast.Call
	Array     ast.Array
	ExprList  []ast.Expression
	Id        ast.Identifier
}

const CHAR = 57346
const INT = 57347
const FLOAT = 57348
const STRING = 57349
const BOOL = 57350
const VOID = 57351
const WHILE = 57352
const FOR = 57353
const IF = 57354
const ELSE = 57355
const RETURN = 57356
const LT = 57357
const LE = 57358
const EQ = 57359
const GE = 57360
const GT = 57361
const AND = 57362
const OR = 57363
const ADD = 57364
const SUB = 57365
const MUL = 57366
const DIV = 57367
const MOD = 57368
const RSHIFT = 57369
const LSHIFT = 57370
const ADDS = 57371
const SUBS = 57372
const MULS = 57373
const DIVS = 57374
const MODS = 57375
const LSHIFTS = 57376
const RSHIFTS = 57377
const ID = 57378
const CHARCON = 57379
const INTCON = 57380
const STRINGCON = 57381
const FLOATCON = 57382
const TRUE = 57383
const FALSE = 57384
const ANDS = 57385
const XORS = 57386
const ORS = 57387
const NE = 57388
const NEG = 57389
const POS = 57390
const NOT = 57391
const TILDE = 57392

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CHAR",
	"INT",
	"FLOAT",
	"STRING",
	"BOOL",
	"VOID",
	"WHILE",
	"FOR",
	"IF",
	"ELSE",
	"RETURN",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"'^'",
	"'|'",
	"'='",
	"'!'",
	"LT",
	"LE",
	"EQ",
	"GE",
	"GT",
	"AND",
	"OR",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"RSHIFT",
	"LSHIFT",
	"ADDS",
	"SUBS",
	"MULS",
	"DIVS",
	"MODS",
	"LSHIFTS",
	"RSHIFTS",
	"ID",
	"CHARCON",
	"INTCON",
	"STRINGCON",
	"FLOATCON",
	"TRUE",
	"FALSE",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"';'",
	"ANDS",
	"XORS",
	"ORS",
	"NE",
	"'<'",
	"'>'",
	"NEG",
	"POS",
	"NOT",
	"TILDE",
	"','",
	"'~'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:421

type Lexer struct {
	scanner.Scanner
	result ast.Program
	debug  bool
}

func (l *Lexer) Lex(lval *yySymType) int {
	var ttype int
	token := l.Scan()
	lit := l.TokenText()
	tok := int(token)

	switch tok {
	case scanner.Ident:
		ttype = ID
	case scanner.Char:
		ttype = CHARCON
	case scanner.Int:
		ttype = INTCON
	case scanner.Float:
		ttype = FLOATCON
	case scanner.String:
		ttype = STRINGCON
	default:
		ttype = tok
	}

	if strings.Contains("<!=>+-*/%", lit) {
		if l.Peek() == '=' {
			l.Next()
			lit += "="
		}
	}

	if lit == "<" {
		if l.Peek() == '<' {
			l.Next()
			lit += "<"
			if l.Peek() == '=' {
				l.Next()
				lit += "="
			}
		}
	}

	if lit == ">" {
		if l.Peek() == '>' {
			l.Next()
			lit += ">"
			if l.Peek() == '=' {
				l.Next()
				lit += "="
			}
		}
	}

	if lit == "&" {
		if l.Peek() == '&' {
			l.Next()
			lit += "&"
		} else if l.Peek() == '=' {
			l.Next()
			lit += "="
		}
	}

	if lit == "^" {
		if l.Peek() == '=' {
			l.Next()
			lit += "="
		}
	}

	if lit == "|" {
		if l.Peek() == '|' {
			l.Next()
			lit += "|"
		} else if l.Peek() == '=' {
			l.Next()
			lit += "="
		}
	}

	var reserved = map[string]int{
		"char":   CHAR,
		"int":    INT,
		"float":  FLOAT,
		"string": STRING,
		"bool":   BOOL,
		"void":   VOID,
		"while":  WHILE,
		"for":    FOR,
		"if":     IF,
		"else":   ELSE,
		"return": RETURN,
		"true":   TRUE,
		"false":  FALSE,
		"<=":     LE,
		"==":     EQ,
		"!=":     NE,
		">=":     GE,
		"+=":     ADDS,
		"-=":     SUBS,
		"*=":     MULS,
		"/=":     DIVS,
		"%=":     MODS,
		"&=":     ANDS,
		"^=":     XORS,
		"|=":     ORS,
		"&&":     AND,
		"||":     OR,
		"<<":     LSHIFT,
		">>":     RSHIFT,
		"<<=":    LSHIFTS,
		">>=":    RSHIFTS,
	}

	if t, ok := reserved[lit]; ok {
		ttype = t
	}

	lval.token = Token{Literal: lit}

	switch ttype {
	case INTCON:
		if i, err := strconv.ParseInt(lit, 10, 64); err == nil {
			lval.token.Int = i
		}
	case FLOATCON:
		if f, err := strconv.ParseFloat(lit, 64); err == nil {
			lval.token.Float = f
		}
	case STRINGCON:
		lval.token.Literal = strings.TrimPrefix(lval.token.Literal, "\"")
		lval.token.Literal = strings.TrimSuffix(lval.token.Literal, "\"")
	case CHARCON:
		lval.token.Literal = strings.TrimPrefix(lval.token.Literal, "'")
		lval.token.Literal = strings.TrimSuffix(lval.token.Literal, "'")
	case TRUE:
		lval.token.Bool = true
	case FALSE:
		lval.token.Bool = false
	}

	if l.debug && len(strings.TrimSpace(lit)) > 0 {
		fmt.Println(lit, "\t\t\t", l.Position)
	}

	return ttype
}

func (l *Lexer) Error(e string) {
	err := fmt.Sprintf("%s: line %d, column %d",
		e, l.Position.Line, l.Position.Column)
	fmt.Fprintln(os.Stderr, color.Red+misc.Flounder(err)+color.Reset)
}

func ParseProgram(input io.Reader, debug bool) ast.Program {
	l := new(Lexer)
	l.debug = debug
	l.Init(input)
	l.Mode = scanner.ScanIdents | scanner.ScanFloats | scanner.ScanChars
	l.Mode |= scanner.ScanStrings | scanner.SkipComments
	yyParse(l)
	return l.result
}

func ParseProgramString(input string, debug bool) ast.Program {
	l := new(Lexer)
	l.debug = debug
	l.Init(strings.NewReader(input))
	l.Mode = scanner.ScanIdents | scanner.ScanFloats | scanner.ScanChars
	l.Mode |= scanner.ScanStrings | scanner.SkipComments
	yyParse(l)
	return l.result
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1057

var yyAct = [...]int{
	19, 7, 4, 131, 45, 13, 136, 13, 197, 149,
	146, 48, 192, 174, 47, 191, 173, 44, 14, 50,
	176, 46, 147, 39, 157, 150, 147, 154, 83, 84,
	85, 86, 87, 179, 20, 21, 22, 23, 24, 25,
	52, 53, 54, 55, 56, 175, 93, 95, 96, 98,
	32, 12, 97, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 132, 134, 26, 28, 27, 11, 10,
	9, 138, 139, 137, 3, 29, 8, 40, 90, 41,
	43, 90, 135, 52, 53, 54, 55, 56, 54, 55,
	56, 6, 5, 2, 63, 1, 66, 39, 33, 34,
	36, 35, 37, 38, 31, 61, 60, 0, 88, 140,
	0, 94, 91, 0, 89, 91, 148, 89, 0, 0,
	0, 0, 30, 156, 155, 0, 0, 158, 170, 0,
	0, 171, 62, 67, 0, 137, 0, 172, 178, 0,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 20, 21, 22, 23, 24, 25, 132, 194, 0,
	193, 0, 196, 143, 0, 0, 0, 20, 21, 22,
	23, 24, 25, 15, 16, 17, 199, 18, 28, 27,
	200, 0, 202, 0, 0, 204, 0, 29, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 39,
	33, 34, 36, 35, 37, 38, 31, 0, 14, 92,
	20, 21, 22, 23, 24, 25, 15, 16, 17, 0,
	18, 28, 27, 0, 30, 52, 53, 54, 55, 56,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 60, 0,
	0, 0, 39, 33, 34, 36, 35, 37, 38, 31,
	0, 14, 42, 20, 21, 22, 23, 24, 25, 15,
	16, 17, 0, 18, 28, 27, 0, 30, 0, 0,
	0, 0, 0, 29, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 39, 33, 34, 36, 35,
	37, 38, 31, 0, 14, 20, 21, 22, 23, 24,
	25, 0, 0, 0, 0, 0, 28, 27, 0, 0,
	30, 0, 0, 0, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 33, 34,
	36, 35, 37, 38, 31, 52, 53, 54, 55, 56,
	57, 58, 59, 0, 0, 0, 63, 64, 66, 0,
	68, 69, 30, 0, 0, 0, 0, 61, 60, 0,
	0, 0, 0, 0, 52, 53, 54, 55, 56, 57,
	58, 59, 0, 0, 203, 63, 64, 66, 0, 68,
	69, 0, 0, 65, 62, 67, 61, 60, 52, 53,
	54, 55, 56, 57, 58, 59, 0, 0, 0, 63,
	64, 66, 0, 68, 69, 0, 0, 0, 201, 0,
	61, 60, 65, 62, 67, 0, 0, 52, 53, 54,
	55, 56, 57, 58, 59, 0, 0, 198, 63, 64,
	66, 0, 68, 69, 0, 0, 65, 62, 67, 61,
	60, 52, 53, 54, 55, 56, 57, 58, 59, 0,
	0, 0, 63, 64, 66, 0, 68, 69, 0, 0,
	0, 195, 0, 61, 60, 65, 62, 67, 0, 0,
	0, 52, 53, 54, 55, 56, 57, 58, 59, 0,
	0, 0, 63, 64, 66, 177, 68, 69, 0, 65,
	62, 67, 0, 61, 60, 52, 53, 54, 55, 56,
	57, 58, 59, 0, 0, 0, 63, 64, 66, 0,
	68, 69, 0, 0, 153, 0, 0, 61, 60, 65,
	62, 67, 0, 0, 0, 52, 53, 54, 55, 56,
	57, 58, 59, 0, 0, 0, 63, 64, 66, 152,
	68, 69, 0, 65, 62, 67, 0, 61, 60, 52,
	53, 54, 55, 56, 57, 58, 59, 0, 0, 0,
	63, 64, 66, 0, 68, 69, 0, 0, 145, 0,
	0, 61, 60, 65, 62, 67, 0, 0, 52, 53,
	54, 55, 56, 57, 58, 59, 0, 0, 144, 63,
	64, 66, 0, 68, 69, 0, 0, 65, 62, 67,
	61, 60, 52, 53, 54, 55, 56, 57, 58, 59,
	0, 0, 0, 63, 64, 66, 0, 68, 69, 0,
	0, 0, 142, 0, 61, 60, 65, 62, 67, 0,
	0, 52, 53, 54, 55, 56, 57, 58, 59, 0,
	0, 141, 63, 64, 66, 0, 68, 69, 0, 0,
	65, 62, 67, 61, 60, 28, 27, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	62, 67, 0, 0, 0, 0, 39, 33, 34, 36,
	35, 37, 38, 31, 130, 0, 0, 52, 53, 54,
	55, 56, 57, 58, 59, 0, 0, 0, 63, 64,
	66, 30, 68, 69, 0, 0, 0, 0, 0, 61,
	60, 52, 53, 54, 55, 56, 57, 58, 59, 0,
	0, 0, 63, 64, 66, 0, 68, 69, 0, 0,
	0, 99, 0, 61, 60, 65, 62, 67, 28, 27,
	0, 0, 0, 0, 0, 0, 0, 29, 0, 0,
	0, 0, 0, 28, 27, 51, 0, 0, 0, 65,
	62, 67, 29, 0, 0, 0, 0, 0, 0, 39,
	33, 34, 36, 35, 37, 38, 31, 0, 0, 0,
	0, 0, 49, 0, 39, 33, 34, 36, 35, 37,
	38, 31, 0, 0, 30, 52, 53, 54, 55, 56,
	57, 58, 59, 0, 0, 0, 63, 64, 66, 30,
	68, 69, 0, 0, 0, 0, 0, 61, 60, 52,
	53, 54, 55, 56, 57, 58, 59, 0, 0, 0,
	63, 64, 66, 0, 68, 0, 0, 0, 0, 0,
	0, 61, 60, 65, 62, 67, 0, 0, 52, 53,
	54, 55, 56, 57, 58, 59, 0, 0, 0, 63,
	64, 66, 0, 0, 0, 0, 0, 65, 62, 67,
	61, 60, 52, 53, 54, 55, 56, 57, 58, 0,
	0, 0, 0, 63, 64, 66, 0, 0, 52, 53,
	54, 55, 56, 57, 61, 60, 65, 62, 67, 63,
	64, 66, 52, 53, 54, 55, 56, 0, 0, 0,
	61, 60, 0, 63, 64, 66, 0, 0, 0, 0,
	65, 62, 67, 70, 61, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 62, 67, 71,
	72, 73, 74, 75, 79, 80, 0, 159, 0, 0,
	65, 62, 67, 82, 0, 0, 0, 81, 0, 0,
	76, 77, 78, 160, 161, 162, 163, 164, 168, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 166, 167,
}

var yyPact = [...]int{
	289, -1000, 289, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -23, 236, -32, -39, -42, 793, 766,
	-1000, -1000, -1000, -1000, -1000, -1000, 970, 808, 808, 808,
	808, 808, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 75, -1000, 183, -1000, -23, 808, 341, 808, -1000,
	742, -1000, 808, 808, 808, 808, 808, 808, 808, 808,
	808, 808, 808, 808, 808, 808, 808, 808, 808, 808,
	808, 808, 808, 808, 808, 808, 808, 808, 808, 808,
	808, 808, 700, -1000, -1000, -1000, -1000, 676, 30, -1000,
	808, 71, -1000, -1000, 78, 647, 623, -23, 594, -1000,
	91, 91, -1000, -1000, -1000, 957, 943, 927, 25, 25,
	240, 240, 88, 88, 240, 240, 903, 874, 850, 850,
	850, 850, 850, 850, 850, 850, 850, 850, 850, 570,
	-1000, -44, 850, -1000, -37, -45, -1000, -23, 540, 516,
	4, 289, 808, 1, 289, 994, -1000, 808, -1000, -37,
	167, -41, -1000, -46, -35, -1000, 486, 808, 20, 808,
	808, 808, 808, 808, 808, 808, 808, 808, 808, 808,
	850, -1000, -1000, -43, -1000, -47, 808, 808, 462, 289,
	850, 850, 850, 850, 850, 850, 850, 850, 850, 850,
	850, -1000, -1000, -48, 433, 808, -1000, -1000, -37, 409,
	-1000, 808, 380, -37, -1000,
}

var yyPgo = [...]int{
	0, 115, 113, 94, 4, 112, 111, 102, 6, 1,
	100, 2, 96, 90, 89, 88, 51, 0, 50, 45,
	3, 85,
}

var yyR1 = [...]int{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 5, 5, 6, 6, 6, 6, 7, 7,
	8, 8, 9, 9, 10, 10, 11, 11, 11, 11,
	11, 11, 11, 12, 13, 13, 14, 14, 15, 15,
	16, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 18, 18, 19, 20, 20,
	21,
}

var yyR2 = [...]int{
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 5, 6, 3, 5, 6, 7, 1, 3,
	2, 4, 2, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 5, 9, 12, 5, 7, 2, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 3, 4, 3, 1, 3,
	1,
}

var yyChk = [...]int{
	-1000, -1, -2, -3, -11, -5, -6, -9, -12, -13,
	-14, -15, -16, -4, 55, 10, 11, 12, 14, -17,
	4, 5, 6, 7, 8, 9, -21, 16, 15, 24,
	71, 53, -18, 47, 48, 50, 49, 51, 52, 46,
	-3, -21, 56, -10, -11, -4, 53, 53, 53, 59,
	-17, 59, 15, 16, 17, 18, 19, 20, 21, 22,
	38, 37, 64, 26, 27, 63, 28, 65, 30, 31,
	23, 39, 40, 41, 42, 43, 60, 61, 62, 44,
	45, 57, 53, -17, -17, -17, -17, -17, 53, 59,
	23, 57, 56, -11, -21, -17, -17, -4, -17, 59,
	-17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
	54, -20, -17, 54, 54, -7, -8, -4, -17, -17,
	58, 54, 59, -21, 54, 58, 54, 70, -9, 54,
	70, -21, 59, 58, 23, -11, -17, 23, -11, 23,
	39, 40, 41, 42, 43, 60, 61, 62, 44, 45,
	-17, -9, -8, 57, 59, -19, 55, 59, -17, 13,
	-17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
	-17, 58, 59, -20, -17, 59, -11, 56, 54, -17,
	-9, 59, -17, 54, -9,
}

var yyDef = [...]int{
	0, -2, 1, 2, 4, 5, 26, 27, 28, 29,
	30, 31, 32, 0, 0, 0, 0, 0, 0, 0,
	6, 7, 8, 9, 10, 11, 76, 0, 0, 0,
	0, 0, 75, 77, 78, 79, 80, 81, 82, 100,
	3, 0, 22, 0, 24, 0, 0, 0, 0, 38,
	0, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 71, 72, 73, 0, 0, 14,
	0, 0, 23, 25, 0, 0, 0, 0, 0, 39,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 0,
	95, 0, 98, 74, 0, 0, 18, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 96, 0, 12, 0,
	0, 20, 15, 0, 0, 33, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 13, 19, 0, 16, 0, 0, 0, 0, 0,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 21, 17, 0, 0, 0, 37, 97, 0, 0,
	34, 0, 0, 0, 35,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 24, 3, 3, 3, 19, 20, 3,
	53, 54, 17, 15, 70, 16, 3, 18, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 59,
	64, 23, 65, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 57, 3, 58, 21, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 22, 56, 71,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 60, 61, 62, 63, 66, 67, 68, 69,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:99
		{
			yyVAL.Program = ast.Program{Statements: yyDollar[1].DeclList}
			yylex.(*Lexer).result = yyVAL.Program
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:103
		{
			yyVAL.DeclList = []ast.Statement{yyDollar[1].Decl}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:104
		{
			yyVAL.DeclList = append(yyDollar[1].DeclList, yyDollar[2].Decl)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:108
		{
			yyVAL.Decl = yyDollar[1].Stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:109
		{
			yyVAL.Decl = yyDollar[1].FuncDecl
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:113
		{
			yyVAL.Type = ast.Type{Value: yyDollar[1].token.Literal}
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:114
		{
			yyVAL.Type = ast.Type{Value: yyDollar[1].token.Literal}
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:115
		{
			yyVAL.Type = ast.Type{Value: yyDollar[1].token.Literal}
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:116
		{
			yyVAL.Type = ast.Type{Value: yyDollar[1].token.Literal}
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:117
		{
			yyVAL.Type = ast.Type{Value: yyDollar[1].token.Literal}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:118
		{
			yyVAL.Type = ast.Type{Value: yyDollar[1].token.Literal}
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:122
		{
			yyVAL.FuncDecl = ast.FuncDecl{
				Type:       yyDollar[1].Type,
				Ident:      yyDollar[2].Id,
				Parameters: make([]ast.Param, 0),
				Body:       yyDollar[5].Block,
			}
		}
	case 13:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:130
		{
			yyVAL.FuncDecl = ast.FuncDecl{
				Type:       yyDollar[1].Type,
				Ident:      yyDollar[2].Id,
				Parameters: yyDollar[4].ParamList,
				Body:       yyDollar[6].Block,
			}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:141
		{
			yyVAL.VarDecl = ast.VarDecl{
				Type:        yyDollar[1].Type,
				Ident:       yyDollar[2].Id,
				Initialized: false,
			}
		}
	case 15:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:148
		{
			yyVAL.VarDecl = ast.VarDecl{
				Type:        yyDollar[1].Type,
				Ident:       yyDollar[2].Id,
				Value:       yyDollar[4].Expr,
				Initialized: true,
			}
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:156
		{
			yyVAL.VarDecl = ast.VarDecl{
				Type:        ast.Type{Value: yyDollar[1].Type.Value + "arr"},
				Ident:       yyDollar[2].Id,
				Value:       yyDollar[4].Expr,
				Initialized: false,
			}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:164
		{
			yyVAL.VarDecl = ast.VarDecl{
				Type:        ast.Type{Value: yyDollar[1].Type.Value + "arr"},
				Ident:       yyDollar[2].Id,
				Value:       yyDollar[6].Array,
				Initialized: true,
			}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:175
		{
			yyVAL.ParamList = []ast.Param{yyDollar[1].Param}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:176
		{
			yyVAL.ParamList = append(yyDollar[1].ParamList, yyDollar[3].Param)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:180
		{
			yyVAL.Param = ast.Param{Type: yyDollar[1].Type, Ident: yyDollar[2].Id, Array: false}
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:181
		{
			yyVAL.Param = ast.Param{Type: yyDollar[1].Type, Ident: yyDollar[2].Id, Array: true}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:185
		{
			yyVAL.Block = ast.Block{Statements: make([]ast.Statement, 0)}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:188
		{
			yyVAL.Block = ast.Block{Statements: yyDollar[2].StmtList}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:194
		{
			yyVAL.StmtList = []ast.Statement{yyDollar[1].Stmt}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:195
		{
			yyVAL.StmtList = append(yyDollar[1].StmtList, yyDollar[2].Stmt)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:199
		{
			yyVAL.Stmt = yyDollar[1].VarDecl
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:200
		{
			yyVAL.Stmt = yyDollar[1].Block
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:201
		{
			yyVAL.Stmt = yyDollar[1].While
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:202
		{
			yyVAL.Stmt = yyDollar[1].For
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:203
		{
			yyVAL.Stmt = yyDollar[1].IfElse
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:204
		{
			yyVAL.Stmt = yyDollar[1].Return
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:205
		{
			yyVAL.Stmt = yyDollar[1].ExprStmt
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:209
		{
			yyVAL.While = ast.While{
				Condition: yyDollar[3].Expr,
				Body:      yyDollar[5].Stmt,
			}
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:218
		{
			yyVAL.For = ast.For{
				Init:      yyDollar[3].Expr,
				Condition: yyDollar[5].Expr,
				Increment: yyDollar[7].Expr,
				Body:      yyDollar[9].Block,
			}
		}
	case 35:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:226
		{
			yyVAL.For = ast.For{
				VarDecl:   true,
				Type:      yyDollar[3].Type,
				Ident:     yyDollar[4].Id,
				Value:     yyDollar[6].Expr,
				Condition: yyDollar[8].Expr,
				Increment: yyDollar[10].Expr,
				Body:      yyDollar[12].Block,
			}
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:240
		{
			yyVAL.IfElse = ast.IfElse{
				Condition:      yyDollar[3].Expr,
				Consequence:    yyDollar[5].Stmt,
				HasAlternative: false,
			}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:247
		{
			yyVAL.IfElse = ast.IfElse{
				Condition:      yyDollar[3].Expr,
				Consequence:    yyDollar[5].Stmt,
				Alternative:    yyDollar[7].Stmt,
				HasAlternative: true,
			}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:258
		{
			yyVAL.Return = ast.Return{Void: true}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:259
		{
			yyVAL.Return = ast.Return{Value: yyDollar[2].Expr, Void: false}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:263
		{
			yyVAL.ExprStmt = ast.ExprStmt{Expression: yyDollar[1].Expr}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:267
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "+", Right: yyDollar[3].Expr}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:268
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "-", Right: yyDollar[3].Expr}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:269
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "*", Right: yyDollar[3].Expr}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:270
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "/", Right: yyDollar[3].Expr}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:271
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "%", Right: yyDollar[3].Expr}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:272
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "&", Right: yyDollar[3].Expr}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:273
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "^", Right: yyDollar[3].Expr}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:274
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "|", Right: yyDollar[3].Expr}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:275
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "<<", Right: yyDollar[3].Expr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:276
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: ">>", Right: yyDollar[3].Expr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:277
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "<", Right: yyDollar[3].Expr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:278
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "<=", Right: yyDollar[3].Expr}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:279
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "==", Right: yyDollar[3].Expr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:280
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "!=", Right: yyDollar[3].Expr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:281
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: ">=", Right: yyDollar[3].Expr}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:282
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: ">", Right: yyDollar[3].Expr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:283
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "&&", Right: yyDollar[3].Expr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:284
		{
			yyVAL.Expr = ast.InfixExpr{Left: yyDollar[1].Expr, Op: "||", Right: yyDollar[3].Expr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:285
		{
			yyVAL.Expr = ast.Assign{Ident: yyDollar[1].Id, Value: yyDollar[3].Expr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:286
		{
			yyVAL.Expr = ast.AssignExpr{Ident: yyDollar[1].Id, Op: "+=", Value: yyDollar[3].Expr}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:287
		{
			yyVAL.Expr = ast.AssignExpr{Ident: yyDollar[1].Id, Op: "-=", Value: yyDollar[3].Expr}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:288
		{
			yyVAL.Expr = ast.AssignExpr{Ident: yyDollar[1].Id, Op: "*=", Value: yyDollar[3].Expr}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:289
		{
			yyVAL.Expr = ast.AssignExpr{Ident: yyDollar[1].Id, Op: "/=", Value: yyDollar[3].Expr}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:290
		{
			yyVAL.Expr = ast.AssignExpr{Ident: yyDollar[1].Id, Op: "%=", Value: yyDollar[3].Expr}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:291
		{
			yyVAL.Expr = ast.AssignExpr{Ident: yyDollar[1].Id, Op: "&=", Value: yyDollar[3].Expr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:292
		{
			yyVAL.Expr = ast.AssignExpr{Ident: yyDollar[1].Id, Op: "^=", Value: yyDollar[3].Expr}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:293
		{
			yyVAL.Expr = ast.AssignExpr{Ident: yyDollar[1].Id, Op: "|=", Value: yyDollar[3].Expr}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:294
		{
			yyVAL.Expr = ast.AssignExpr{Ident: yyDollar[1].Id, Op: "<<=", Value: yyDollar[3].Expr}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:295
		{
			yyVAL.Expr = ast.AssignExpr{Ident: yyDollar[1].Id, Op: ">>=", Value: yyDollar[3].Expr}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:296
		{
			yyVAL.Expr = ast.PrefixExpr{Op: "-", Right: yyDollar[2].Expr}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:297
		{
			yyVAL.Expr = ast.PrefixExpr{Op: "+", Right: yyDollar[2].Expr}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:298
		{
			yyVAL.Expr = ast.PrefixExpr{Op: "!", Right: yyDollar[2].Expr}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:299
		{
			yyVAL.Expr = ast.PrefixExpr{Op: "~", Right: yyDollar[2].Expr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:300
		{
			yyVAL.Expr = yyDollar[2].Expr
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:301
		{
			yyVAL.Expr = yyDollar[1].Call
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:302
		{
			yyVAL.Expr = yyDollar[1].Id
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:303
		{
			yyVAL.Expr = ast.CharCon{Value: yyDollar[1].token.Literal}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:304
		{
			yyVAL.Expr = ast.IntCon{Value: yyDollar[1].token.Int}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:305
		{
			yyVAL.Expr = ast.FloatCon{Value: yyDollar[1].token.Float}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:306
		{
			yyVAL.Expr = ast.StringCon{Value: yyDollar[1].token.Literal}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:307
		{
			yyVAL.Expr = ast.Bool{Value: yyDollar[1].token.Bool}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:308
		{
			yyVAL.Expr = ast.Bool{Value: yyDollar[1].token.Bool}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:309
		{
			yyVAL.Expr = ast.IndexExpr{Ident: yyDollar[1].Id, Index: yyDollar[3].Expr}
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:310
		{
			yyVAL.Expr = ast.AssignExprIndexExpr{
				Ident: yyDollar[1].Id,
				Index: yyDollar[3].Expr,
				Op:    "=",
				Value: yyDollar[6].Expr,
			}
		}
	case 85:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:318
		{
			yyVAL.Expr = ast.AssignExprIndexExpr{
				Ident: yyDollar[1].Id,
				Index: yyDollar[3].Expr,
				Op:    "+=",
				Value: yyDollar[6].Expr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:326
		{
			yyVAL.Expr = ast.AssignExprIndexExpr{
				Ident: yyDollar[1].Id,
				Index: yyDollar[3].Expr,
				Op:    "-=",
				Value: yyDollar[6].Expr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:334
		{
			yyVAL.Expr = ast.AssignExprIndexExpr{
				Ident: yyDollar[1].Id,
				Index: yyDollar[3].Expr,
				Op:    "*=",
				Value: yyDollar[6].Expr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:342
		{
			yyVAL.Expr = ast.AssignExprIndexExpr{
				Ident: yyDollar[1].Id,
				Index: yyDollar[3].Expr,
				Op:    "/=",
				Value: yyDollar[6].Expr,
			}
		}
	case 89:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:350
		{
			yyVAL.Expr = ast.AssignExprIndexExpr{
				Ident: yyDollar[1].Id,
				Index: yyDollar[3].Expr,
				Op:    "%=",
				Value: yyDollar[6].Expr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:358
		{
			yyVAL.Expr = ast.AssignExprIndexExpr{
				Ident: yyDollar[1].Id,
				Index: yyDollar[3].Expr,
				Op:    "&=",
				Value: yyDollar[6].Expr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:366
		{
			yyVAL.Expr = ast.AssignExprIndexExpr{
				Ident: yyDollar[1].Id,
				Index: yyDollar[3].Expr,
				Op:    "^=",
				Value: yyDollar[6].Expr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:374
		{
			yyVAL.Expr = ast.AssignExprIndexExpr{
				Ident: yyDollar[1].Id,
				Index: yyDollar[3].Expr,
				Op:    "|=",
				Value: yyDollar[6].Expr,
			}
		}
	case 93:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:382
		{
			yyVAL.Expr = ast.AssignExprIndexExpr{
				Ident: yyDollar[1].Id,
				Index: yyDollar[3].Expr,
				Op:    "<<=",
				Value: yyDollar[6].Expr,
			}
		}
	case 94:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:390
		{
			yyVAL.Expr = ast.AssignExprIndexExpr{
				Ident: yyDollar[1].Id,
				Index: yyDollar[3].Expr,
				Op:    ">>=",
				Value: yyDollar[6].Expr,
			}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:401
		{
			yyVAL.Call = ast.Call{Function: yyDollar[1].Id, Void: true}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:404
		{
			yyVAL.Call = ast.Call{Function: yyDollar[1].Id, Arguments: yyDollar[3].ExprList, Void: false}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:410
		{
			yyVAL.Array = ast.Array{Elements: yyDollar[2].ExprList}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:414
		{
			yyVAL.ExprList = []ast.Expression{yyDollar[1].Expr}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:415
		{
			yyVAL.ExprList = append(yyDollar[1].ExprList, yyDollar[3].Expr)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:419
		{
			yyVAL.Id = ast.Identifier{Name: yyDollar[1].token.Literal}
		}
	}
	goto yystack /* stack new state and value */
}
